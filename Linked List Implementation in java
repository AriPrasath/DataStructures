IP:
1
1
1
2
1
3
1
4
1
5
1
6
1
7
1
8
1
9

2

3
2

4
5

6
18

7
3
15

2

8

2

9

2

10
111
99
111
66
111
55
112

2

11

13 

14
3

15

OP:
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
1 2 3 4 5 6 7 8 9 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the KEY to be Searched in List : 
True ,Occurs at Index : 2
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Deleted in List : 
Successfully Deleted
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the KEY to be Entered in the First of List : 
18 2 3 4 6 7 8 9 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the KEY to be Entered in the Positon of List : 
Successfully Inserted
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
18 2 15 3 4 6 7 8 9 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Deleted First in List : 
Successfully Deleted
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
2 15 3 4 6 7 8 9 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter the value to be Deleted Last in List : 
Successfully Deleted
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
2 15 3 4 6 7 8 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Enter Any One: 
111.Insert
112.Exit
Enter Any One: 
111.Insert
112.Exit
Enter Any One: 
111.Insert
112.Exit
Enter Any One: 
111.Insert
112.Exit
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
2 15 3 4 6 7 8 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

The Elements in List Are : 
99 66 55 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

Succesfully Reversed
8 7 6 4 3 15 2 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.INSERT AT FRIST
7.INSERT AT POSITION
8.DELETE AT FIRST
9.DELETE AT LAST
10.INSERT NEW LIST
11.DISPLAY MATCH
12.MERGE
13.REVERSE SORT
14.SPLIT
15.EXIT

********************END********************



import java.util.*;

//Linked List Class which holds Node in it
class LinkedList{
    // Node node=new Node();
    Node head;
    Node tail;
    
    //method to Assign Value
    public void assign(int value){
        Node new_node=new Node();
        new_node.data=value;
        new_node.next=null;
        
        if(head==null){
            head=new_node;
        }else{
            tail.next=new_node;
        }
        tail=new_node;
    }
    
    
    //method to Assign Value At FIRST
    public void assignFirst(int value){
        Node new_node=new Node();
        new_node.data=value;
        new_node.next=null;
        
        if(head==null){
            head=new_node;
        }else{
            new_node.next=head.next;
            head=new_node;
        }
        print();
    }
    
    //method to Assign Value At POSITION
    public void assignPos(int value,int dat){
        Node new_node=new Node();
        new_node.data=dat;
        new_node.next=null;
        
        
        Node temp=head;
        Node prev=head;
        int i=1;
        if(value==1){
            if(head==null){
                head=new_node;
            }else{
                new_node.next=head.next;
                head=new_node;
            }
            System.out.println("Successfully Inserted");
            return;
        }else{
            while(temp!=null){
                if(i==value){
                    prev.next=new_node;
                    new_node.next=temp;
                    System.out.println("Successfully Inserted");
                    return;
                }
                prev=temp;
                temp=temp.next;
                i++;
            }
        }
        System.out.println("Position Doesn't Exist");
    }
    
    //method to print the LinkedList
    public void print(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
        System.out.println();
    }
    
    //method to search a value in LinkedList
    public void search(int key){
        Node temp=head;
        int i=1;
        while(temp!=null){
            if(temp.data==key){
                System.out.println("True ,Occurs at Index : "+i);
                return;
            }
            i++;
            temp=temp.next;
        }
        System.out.println("Key Doesn't Occur");
    }
    
    public void delete(int key){
        Node temp=head;
        Node prev=head;
        int i=1;
        
        if(head.data==key){
            head=head.next;
            System.out.println("Successfully Deleted");
            return;
        }
        while(temp!=null){
            if(temp.data==key){
                prev.next=null;
                prev.next=temp.next;
                System.out.println("Successfully Deleted");
                return;
            }
            prev=temp;
            temp=temp.next;
        }
        System.out.println("Key Doesn't Occur");
    }
    
    public void deleteFirst(){
        
        if(head!=null){
            head=head.next;
            System.out.println("Successfully Deleted");
            return;
        }
        
        System.out.println("No Node Available");
    }
    public void deleteLast(){
        
        if(head==tail){
            head=null;
            System.out.println("Successfully Deleted");
            return;
        }else{
            Node temp=head;
            while(temp.next!=null){
                if(temp.next==tail){
                    temp.next=null;
                    tail=temp;
                    System.out.println("Successfully Deleted");
                    return;
                }
                temp=temp.next;
            }
        }
        
        System.out.println("No Node Available");
    }
    
    
    public void reverse(){
        Node prev=null;
        Node curr=head;
        Node next=null;
        
        while(curr!=null){
            next=curr.next;
            curr.next=null;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }
    
    public void splitReverse(int size){
        Node start=head,last=head,prev=null,curr=start,next=null;;
        int i=1;
        
        while(last!=null){
            if(i==size || last.next==null){
                
                int j=1;
                while(j<=i){
                    next=curr.next;
                    curr.next=null;
                    curr.next=prev;
                    prev=curr;
                    curr=next;
                    j++;
                }
                if(last.next==null){
                    head=last; 
                }
                i=1;
                last=last.next;
                start=last;
            }else{
                i++;
                last=last.next;
            }
        }
    }
}

//Node class With two Attributes to hold value
class Node{
    int data;
    Node next;
}
    
public class Main{
    public static void main(String[] args){
        Scanner scanner=new Scanner(System.in);
        LinkedList list=new LinkedList();
        LinkedList new_list=new LinkedList();
        
        int flag=0;
        do{
            System.out.println("Enter any one :\n1.INSERT\n2.PRINT\n3.SEARCH\n4.DELETE\n5.SORT\n6.INSERT AT FRIST\n7.INSERT AT POSITION\n8.DELETE AT FIRST\n9.DELETE AT LAST\n10.INSERT NEW LIST\n11.DISPLAY MATCH\n12.MERGE\n13.REVERSE SORT\n14.SPLIT\n15.EXIT\n");
            int action=scanner.nextInt();
            switch(action){
                case 1:
                    System.out.println("Enter the value to be Added in List : ");
                    list.assign(scanner.nextInt());
                    break;
                    
                case 2:
                    System.out.println("The Elements in List Are : ");
                    list.print();
                    break;
                
                case 3:
                    System.out.println("Enter the KEY to be Searched in List : ");
                    list.search(scanner.nextInt());
                    break;
                    
                case 4:
                    System.out.println("Enter the value to be Deleted in List : ");
                    list.delete(scanner.nextInt());
                    break;
                case 5:
                    // list.sort();
                    // list.print();
                    // break;
                case 6:
                    System.out.println("Enter the KEY to be Entered in the First of List : ");
                    list.assignFirst(scanner.nextInt());
                    break;
                    
                case 7:
                    System.out.println("Enter the KEY to be Entered in the Positon of List : ");
                    list.assignPos(scanner.nextInt(),scanner.nextInt());
                    break;
                    
                case 8:
                    System.out.println("Enter the value to be Deleted First in List : ");
                    list.deleteFirst();
                    break;
                    
                case 9:
                    System.out.println("Enter the value to be Deleted Last in List : ");
                    list.deleteLast();
                    break;
                    
                case 10:
                    int new_choice=0;
                    do{
                        System.out.println("Enter Any One: \n111.Insert\n112.Exit");
                        new_choice=scanner.nextInt();
                        switch(new_choice){
                            case 111:
                                new_list.assign(scanner.nextInt());
                                break;
                                
                            case 112:
                                break;
                        }
                        
                    }while(new_choice!=112);
                    break;
                    
                case 11:
                    System.out.println("The Elements in List Are : ");
                    new_list.print();
                    break;
                
                case 12:
                    
                    // merge();
                    break;
                case 13:
                    list.reverse();
                    System.out.println("Succesfully Reversed");
                    list.print();
                    break;
                case 14:
                    System.out.println("Enter the size to be spit");
                    list.splitReverse(scanner.nextInt());
                    list.print();
                    break;
                    
                case 15:
                    flag=1;
                    break;
                    
                default :
                    System.out.println("Invalid Option!!!!!!");
                    break;
            }
        }while(flag==0);
        System.out.println("********************END********************");
    }
}
