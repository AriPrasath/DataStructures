IP:
1
1
1
2
1
3
1
4
1
5
1
6
1
7
1
8
1
9
2
3
2
4
5
6



OP:
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Added in List : 
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

The Elements in List Are : 
1
2
3
4
5
6
7
8
9
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the KEY to be Searched in List : 
True ,Occurs at Index : 2
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT

Enter the value to be Deleted in List : 
Successfully Deleted
1
2
3
4
6
7
8
9
Enter any one :
1.INSERT
2.PRINT
3.SEARCH
4.DELETE
5.SORT
6.EXIT





import java.util.*;

//Linked List Class which holds Node in it
class LinkedList{
    // Node node=new Node();
    Node head;
    Node tail;
    
    //method to Assign Value
    public void assign(int value){
        Node new_node=new Node();
        new_node.data=value;
        new_node.next=null;
        
        if(head==null){
            head=new_node;
        }else{
            tail.next=new_node;
        }
        tail=new_node;
    }
    
    //method to print the LinkedList
    public void print(){
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.data);
            temp=temp.next;
        }
    }
    
    //method to search a value in LinkedList
    public void search(int key){
        Node temp=head;
        int i=1,flag=0;;
        while(temp!=null){
            if(temp.data==key){
                System.out.println("True ,Occurs at Index : "+i);
                flag=1;
                break;
            }
            i++;
            temp=temp.next;
        }
        if(flag==0){
            System.out.println("Key Doesn't Occur");
        }
    }
    
    public void delete(int key){
        Node temp=head;
        Node prev=head;
        int i=1,flag=0;
        
        if(head.data==key){
            head=head.next;
            flag=1;
        }
        while(temp!=null){
            if(temp.data==key){
                prev.next=temp.next;
                System.out.println("Successfully Deleted");
                flag=1;
                break;
            }
            prev=temp;
            temp=temp.next;
        }
        if(flag==0){
            System.out.println("Key Doesn't Occur");
        }
        print();
    }
}

//Node class With two Attributes to hold value
class Node{
    int data;
    Node next;
}
    
public class Main{
    public static void main(String[] args){
        Scanner scanner=new Scanner(System.in);
        LinkedList list=new LinkedList();
        
        int flag=0;
        do{
            System.out.println("Enter any one :\n1.INSERT\n2.PRINT\n3.SEARCH\n4.DELETE\n5.SORT\n6.EXIT\n");
            int action=scanner.nextInt();
            switch(action){
                case 1:
                    System.out.println("Enter the value to be Added in List : ");
                    list.assign(scanner.nextInt());
                    break;
                    
                case 2:
                    System.out.println("The Elements in List Are : ");
                    list.print();
                    break;
                
                case 3:
                    System.out.println("Enter the KEY to be Searched in List : ");
                    list.search(scanner.nextInt());
                    break;
                    
                case 4:
                    System.out.println("Enter the value to be Deleted in List : ");
                    list.delete(scanner.nextInt());
                    break;
                case 5:
                    
                case 6:
                    flag=1;
                    break;
                default :
                    System.out.println("Invalid Option!!!!!!");
                    break;
            }
        }while(flag==0);
    }
}
